<%args>
    @domains
    @inaddrs
    $generateReverseZones
    @intnets
    @internalLocalNets => ()
    $confDir
    $dynamicConfDir
    $sambaZones => undef
</%args>
<%init>
use EBox::Config;
use Perl6::Junction qw(any);

my $rfc1918Zones = [
    "10.in-addr.arpa",
    "16.172.in-addr.arpa",
    "17.172.in-addr.arpa",
    "18.172.in-addr.arpa",
    "19.172.in-addr.arpa",
    "20.172.in-addr.arpa",
    "21.172.in-addr.arpa",
    "22.172.in-addr.arpa",
    "23.172.in-addr.arpa",
    "24.172.in-addr.arpa",
    "25.172.in-addr.arpa",
    "26.172.in-addr.arpa",
    "27.172.in-addr.arpa",
    "28.172.in-addr.arpa",
    "29.172.in-addr.arpa",
    "30.172.in-addr.arpa",
    "31.172.in-addr.arpa",
    "168.192.in-addr.arpa",
];

# A suffix given to a domain for external use.
my $suffix = '-external';

# An array whose elements are the IP addresses of DNS secondary servers.
my @secondary = grep(
    /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$/,
    split(/\,/, '{{DNS_SECONDARY_SERVER}}')
);
</%init>
// Generated by Zentyal

acl "trusted" {
% foreach my $intnet (@intnets) {
    <% $intnet %>;
% }
    localhost;
    localnets;
};

acl "internal-local-nets" {
% foreach my $net (@internalLocalNets) {
    <% $net %>;
% }
};

% foreach my $src ('internal', 'external') {
view "<% $src %>" {

%   if ($src eq 'internal') {
    match-clients {
        trusted;
        internal-local-nets;
    };
%   } elsif ($src eq 'external') {
    match-clients { any; };
%   }

    // prime the server with knowledge of the root servers
    zone "." {
        type hint;
        file "/etc/bind/db.root";
    };

    // be authoritative for the localhost forward and reverse zones, and for
    // broadcast zones as per RFC 1912

    zone "localhost" {
        type master;
        file "/etc/bind/db.local";
    };

    zone "127.in-addr.arpa" {
        type master;
        file "/etc/bind/db.127";
    };

    zone "0.in-addr.arpa" {
        type master;
        file "/etc/bind/db.0";
    };

    zone "255.in-addr.arpa" {
        type master;
        file "/etc/bind/db.255";
    };

%   if ($src eq 'internal' and defined $sambaZones and scalar @{$sambaZones}) {
    dlz "AD DNS Zone" {
        database "dlopen /usr/lib/x86_64-linux-gnu/samba/bind9/dlz_bind9_11.so";
    };
%   }

%   foreach my $dom (@domains) {
%       if ($dom->{name} !~ /${suffix}$/) {
%           next if ($src eq 'internal' and defined $sambaZones and
%                lc ($dom->{name}) eq any @{$sambaZones});
    zone "<% $dom->{name} %>." IN {
        type master;
%           if ($src eq 'internal') {
%               if ($dom->{dynamic}) {
        file "<% $dynamicConfDir %>/db.<% $dom->{'name'} %>";
%               } else {
        file "<% $confDir %>/db.<% $dom->{'name'} %>";
%               }
%           } elsif ($src eq 'external') {
%               if ($dom->{dynamic}) {
        file "<% $dynamicConfDir %>/db.<% $dom->{'name'} %>-<% $src %>";
%               } else {
        file "<% $confDir %>/db.<% $dom->{'name'} %>-<% $src %>";
%               }
%           }
%           if ($dom->{dynamic}) {
        update-policy {
            // The only allowed dynamic updates are A records
            grant <% $dom->{'name'} %>. subdomain <% $dom->{'name'} %>. A TXT;
            // Grant from localhost
            grant local-ddns zonesub any;
        };
%           }
%           if ($src eq 'external' && $#secondary + 1) {
        allow-transfer {
%               foreach my $sec (@secondary) {
            <% $sec %>;
%               }
        };
        also-notify {
%               foreach my $sec (@secondary) {
            <% $sec %>;
%               }
        };
%           }
    };
%       }
%   }

%   if ($generateReverseZones) {
%       if ($src eq 'internal') {
%           foreach my $inaddr (@inaddrs) {
%               my $zoneName = $inaddr->{'ip'} . ".in-addr.arpa";
%               next if (defined $sambaZones and
%                   lc ($zoneName) eq any @{$sambaZones});
%               if (qr/${suffix}$/ != any @{$inaddr->{'keyNames'}}) {

    zone "<% $zoneName %>" {
        type master;
        file "<% $inaddr->{'file'} %>";
        update-policy {
            // The only allowed dynamic updates are PTR records
%                   foreach my $keyName (@{$inaddr->{'keyNames'}}) {
%                       next if ($keyName =~ /${suffix}$/);
            grant <% $keyName %>. subdomain <% $inaddr->{'ip'} %>.in-addr.arpa. PTR TXT;
%                   }
            // Grant from localhost
            grant local-ddns zonesub any;
        };
    };
%               }
%           }
%       }

%       foreach my $zoneName (@{$rfc1918Zones}) {
%           next if (defined $sambaZones and
%                lc ($zoneName) eq any @{$sambaZones});
    zone "<% $zoneName %>" {
        type master;
        file "/etc/bind/db.empty";
    };
%       }
%   }
};
% }
